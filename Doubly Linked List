#include<bits/stdc++.h>
#include<stdio.h>
using namespace std;

struct Node{
    int data;
    Node* next;
    Node* prev;
    
    Node(){
        this->data = 0;
        this->next = NULL;
        this->prev = NULL;
    }
    Node(int data, Node* next, Node* prev){
        this->data = data;
        this->next = next;
        this->prev = prev;
    }
    Node(int data){
        this->data = data;
        this->next = NULL;
        this->prev = NULL;
    }
};

void traverse(Node* head){
    Node* temp = head;
    while(temp){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

Node* deleteHead(Node* head){
    if(head == NULL || head->next == NULL) return NULL;
    
    Node* prev = head;
    head = head->next;
    head->prev = NULL;
    delete(prev);
    
    return head;
}

Node* deleteLast(Node* head){
    Node* temp = head->next;
    
    while(temp->next && temp->next->next){
        temp = temp->next;
    }
    Node* delNode = temp->next;
    temp->next->prev = NULL;
    temp->next = NULL;
    
    delete(delNode);
    
    return head;
}

Node* deleteAtPos(Node* head, int pos){
    Node* temp = head;
    
    int count = 0;
    
    if(head == NULL) return NULL;
    
    if (pos == 1) {
    head = head->next;
    if (head) head->prev = NULL;  
    delete(temp);
    
    return head;
}
    
    while(temp){
        count++;
        if(count == pos){
            Node* back = temp->prev;
            back->next = temp->next;
            temp->next = NULL;
            delete(temp);
            
            break;
        }
        temp = temp->next;
    }
    
    return head;
}

Node* deleteAtVal(Node* head, int val){
    Node* temp = head;
    
    if(head->data == val){
        head = head->next;
        head->prev = NULL;
        delete(temp);
        
        return head;
    }
    
    while(temp){
        if(temp->data == val){
            Node* back = temp->prev;
            back->next = temp->next;
            temp->prev = NULL;
            delete(temp);
            
            break;
        }
        temp = temp->next;
    }
    return head;
}

Node* convert2DLL(vector<int> arr){
    Node* head = new Node(arr[0]);
    Node* prev = head;
    
    for(int i=1; i<arr.size(); i++){
        Node* temp = new Node(arr[i], NULL, prev);
        prev->next = temp;
        prev = prev->next;
    }
    return head;
}

// REVERSE //
Node* reverseDLL(Node* head){
    Node* curr = head;
    Node* last = NULL;

    while(curr){
        //swap next and last
        last = curr->prev;
        curr->prev = curr->next;
        curr->next = last;

        curr = curr->prev;
    }
        return last->prev;
}

int main(){
    vector<int> arr = {1,2,3,4,5,6,7,8,9,10};
    Node* head = convert2DLL(arr);
    traverse(head);
    
    head = deleteHead(head);
    traverse(head);
    
    head = deleteLast(head);
    traverse(head);
    
    head = deleteAtPos(head, 1);
    traverse(head);
    
    head = deleteAtVal(head, 5);
    traverse(head);
    
    return 0;    
}
