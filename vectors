--------------------------------------------------------------------------------------------
vector
--------------------------------------------------------------------------------------------

void evector(){
    vector<int> v;
    v.push_back(10);
    //v.pop_back();
    v.emplace_back(20);
    v.emplace_back(30);
    
    cout<<v[0]<<" "<<v[1]<<" "<<v[2]<<endl;
    
    for(vector<int>::iterator it = v.begin(); it != v.end(); it++){
        cout<<*(it)<<endl;
    }
    
    for(auto it = v.begin(); it != v.end(); it++){
        cout<<*(it)<<endl;
    }
    
    v.erase(v.begin()+1, v.end());
    for(auto it = v.begin(); it != v.end(); it++){
    cout<<*(it)<<endl;
    }
    
    cout<<v.size()<<endl;
    //v1.swap(v2);    
    //v1.clear();
    
    v.insert(v.begin()+1, 2, 5);
    for(auto it=v.begin(); it!=v.end(); it++){
        cout<<*(it)<<endl;
    }
}

--------------------------------------------------------------------------------------------
list 
--------------------------------------------------------------------------------------------


#include<bits/stdc++.h>
using namespace std;

void elist(){
    list<int> ls;
    ls.push_back(10);
    ls.emplace_back(20);
    ls.push_front(10);  // vector me insert krna pdta hai which is costlier than list's push front

    ls.insert(next(ls.begin(),2),30);
    ls.pop_front();
    
    for(auto it = ls.begin(); it != ls.end(); it++){
        cout<<*(it)<<endl;
    }
}

int main(){
    // epair();
    elist();
    return 0;
}

--------------------------------------------------------------------------------------------
dequeue ----> same like list
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
Stack
--------------------------------------------------------------------------------------------

void estack(){
    // no indexing in stack, - LIFO
    stack<int> st;
    st.push(10);
    st.push(20);
    st.push(30);
    st.push(40);
    st.emplace(50);
    cout<<st.top()<<endl;
    st.pop();
    cout<<st.top()<<endl;
    cout<<st.size()<<endl;
    
    // stack<int> st1,st2;
    // st1.swap(st2);
    cout<<st.empty()<<endl;
}

int main(){
    // epair();
    // elist();
    estack();

    return 0;
}

--------------------------------------------------------------------------------------------
Queue
--------------------------------------------------------------------------------------------

void equeue(){
    // FIFO
    queue<int> q;
    q.push(10);
    q.push(20);
    q.push(30);
    q.push(40);
    q.emplace(50);
    
    q.pop();
    
    cout<<q.size()<<endl;
    cout<<q.front()<<endl;
    cout<<q.back()<<endl;
}

int main(){
    // epair();
    // elist();
    // estack();
    equeue();
    return 0;
}

--------------------------------------------------------------------------------------------
Priority Queue - similar to queue, BUT - biggest number/string stores on top after push, pops frm top 
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
SET - sorted and unique. uses insert and erase, not push.
--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
MultiSET - only sorted not unique. uses insert and erase, not push.
--------------------------------------------------------------------------------------------
