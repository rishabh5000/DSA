/////////////////////////////////////////////////////////////////////////
                     Search / Traverse / Count nodes 
/////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include<bits/stdc++.h>
using namespace std;

struct Node {
	int data;
	Node* next;

	Node() {
		this->data = 0;
		this->next = NULL;
	}
	Node(int data) {
		this->data = data;
		this->next = NULL;
	}
	Node(int data, Node* next) {
		this->data = data;
		this->next = next;
	}
};

Node* convert(vector<int> arr) {
	Node* head = new Node(arr[0]);
	Node* p = head;

	for(int i=1; i<arr.size(); i++) {
		Node* temp = new Node(arr[i]);
		p->next = temp;
		p = p->next;
	}
	return head;
}

int count(Node* head) {
	Node* temp = head;
	int count = 0;
	while(temp) {
		count++;
		temp = temp->next;
	}
	return count;
}

int search(Node* head, int k) {
	Node* temp = head;
	while(temp) {
		if(temp->data == k) return 1;
		temp = temp->next;
	}
	return 0;
}

void traverse(Node* head){
    Node* temp = head;
    while(temp){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

Node* removeHead(Node* head) {
	Node* temp = head;
	head = head->next;
	free(temp);

	return head;
}

Node* removeLast(Node* head){
    Node* temp = head;
    Node* p = temp->next;
    
    while(p->next){
        p = p->next;
        temp = temp->next;
    }
    temp->next = NULL;
    free(p);
    
    return head;
}

Node* removeAtPos(Node* head, int pos){
    if(head == NULL) return head;
    
    Node* temp = head;
    while(temp){
        temp = temp->next;
    }
}

//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                     Reverse - Iterative
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ListNode* reverseList(ListNode* head) {
        ListNode* back = NULL;
        ListNode* temp = head;

        while(temp){
            ListNode* front = temp->next;
            temp->next = back;
            back = temp;

            temp = front;
        }
        return back;
    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                     Reverse - Recursive
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if(head == NULL || head->next == NULL){
            return head;
        }

        ListNode* newHead = reverseList(head->next);

        ListNode* front = head->next;
        front->next = head;
        head->next = NULL;

        return newHead;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                     Merge LL
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Node* merge(Node* head1, Node* head2){
    Node* temp1 = head1;
    Node* temp2 = head2;
    
    Node* dummy = new Node(-1);
    Node* temp = dummy;
    
    while(temp1 && temp2){
        if(temp1->data <= temp2->data){
            temp->next = temp1;
            temp = temp1;
            temp1 = temp1->next;
        } else{
            temp->next = temp2;
            temp = temp2;
            temp2 = temp2->next;
        } 
    }
    while(temp1){
        temp->next = temp1;
        temp = temp1;
        temp1 = temp1->next;
    }
    while(temp2){
        temp->next = temp2;
        temp = temp2;
        temp2 = temp2->next;
    }
    return dummy->next;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                     Sort LL
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* head1, ListNode* head2){
        ListNode* temp1 = head1;
        ListNode* temp2 = head2;

        ListNode* dummy = new ListNode(-1);
        ListNode* temp = dummy;

        while(temp1 && temp2){
            if(temp1->val <= temp2->val){
                temp->next = temp1;
                temp = temp1;
                temp1 = temp1->next;
            } else{
                temp->next = temp2;
                temp = temp2;
                temp2 = temp2->next;
            }
        }
        if(temp1) temp->next = temp1;
        if(temp2) temp->next = temp2;

        return dummy->next;
    }

    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;

        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = NULL;

        while(fast && fast->next){
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        prev->next = NULL;

        ListNode* L1 = sortList(head);
        ListNode* L2 = sortList(slow);
        
        return merge(L1, L2);  
    }
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int main()
{
	vector<int> arr = {2,3,4,5,6,6,5,3,2,1};
	Node* head = convert(arr);

	cout<<head->data<<endl;
	cout<<count(head)<<endl;
	cout<<search(head, 5)<<endl;

	traverse(head);
	
	Node* newHead = removeHead(head);
	cout<<newHead->data<<endl;
	traverse(newHead);
	
	removeLast(head);
    traverse(head);
    

	return 0;
}
