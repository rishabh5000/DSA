#include<bits/stdc++.h>
using namespace std;

string convert2Binary(int n){
    string res = "";
    while(n!=0){
        res += (n%2) + '0';
        
        n = n/2;
    }
    reverse(res.begin(), res.end());
    return res;
}

int convert2Int(string S){
    int len = S.length();
    int sum = 0;
    
    for(int i = len-1; i>=0; i--){
        sum += (S[len - i - 1] - '0') * pow(2, i);
    }
    return sum;
}

string onesComplement(string S){
    for(int i=0; i<S.length(); i++){
        if(S[i] == '1') S[i] = '0';
        else{S[i] = '1';}
    }
    return S;
}

string twosComplement(string S){
    for(int i=0; i<S.length(); i++){
        if(S[i] == '1') S[i] = '0';
        else{S[i] = '1';}
    }
    int carry = 1;
    
    for(int i=S.length()-1; i>=0; i--){
        if(S[i] == '1'){
            S[i] = '0';
        } else{
            S[i] = '1';
            carry = 0;
            break;
        }
    }
    if(carry == 1){
        S = '1' + S;
    }
    return S;
}

void swap(int a, int b){
    a = a ^ b;
    b = a ^ b;
    a = a ^ b;
    
    cout<<a<<" "<<b<<endl;
}

bool ithBitcheck1(int n, int i){
    if((n & (1<<i)) != 0) return true;
    else return false;
}

bool ithBitcheck2(int n, int i){
    if(((n>>i) & 1) != 0) return true;
    else return false;
    
}

int setithBit(int n, int i){
    //1101,1
    return (n | (1<<i));    
}

int clearithBit(int n, int i){
    //1101,1
    return (n & ~(1<<i));    
}

int toggleithBit(int n, int i){
    //1101,1
    return (n ^ (1<<i));    
}

int removeLastSetBit(int n){
    return n & (n-1);
}

bool checkPowerof2(int n){
    //has only 1 set bit
    return (n!=0) && ((n & (n-1)) == 0);
}

bool oddEven(int n){
    return (n & 1);
}

int countSetBits(int n){
    int count = 0;
    
    while(n!=0){
        if(n & 1) count++;
        n = n>>1;
    }
    return count;
}


int main(){
    cout<<convert2Binary(54)<<endl;
    cout<<convert2Int("110110")<<endl;

//

    cout<<setithBit(13, 1)<<endl;
    cout<<clearithBit(13, 0)<<endl;
    cout<<toggleithBit(13, 3)<<endl;
    cout<<removeLastSetBit(16)<<endl;
    cout<<(checkPowerof2(16) ? "true" : "false")<<endl;
    cout<<oddEven(15)<<endl;
    cout<<countSetBits(15)<<endl;
    
    return 0;
}
